from typing import List, Dict
from collections import defaultdict

def optimize_packets(packets: List[Dict]) -> List[Dict]:
    print(f"üîç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {len(packets)} –ø–∞–∫–µ—Ç–æ–≤...")

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ src/dst/protocols
    seen = set()
    optimized = []

    for pkt in packets:
        key = (pkt.get("src"), pkt.get("dst"), tuple(pkt.get("protocols", [])))
        if key not in seen:
            seen.add(key)
            optimized.append(pkt)

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
    proto_stats = defaultdict(int)
    for pkt in optimized:
        for proto in pkt.get("protocols", []):
            proto_stats[proto] += 1

    print("üìä –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:", dict(proto_stats))

    return optimized
